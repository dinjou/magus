# Production Docker Compose Configuration
# Usage: docker compose -f docker-compose.prod.yml up -d

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: magus_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - magus_network
    restart: always
    # Don't expose port externally in production
    # ports:
    #   - "5432:5432"

  # Redis Cache & Celery Broker
  redis:
    image: redis:7-alpine
    container_name: magus_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - magus_network
    restart: always
    # Don't expose port externally in production
    # ports:
    #   - "6379:6379"

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magus_web_prod
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn krono.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 4 --timeout 120 --access-logfile - --error-logfile -"
    volumes:
      - static_files:/app/krono/staticfiles
      - media_files:/app/krono/media
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@magus.local}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - magus_network
    restart: always

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magus_celery_prod
    command: celery -A krono worker --loglevel=info --concurrency=4
    volumes:
      - media_files:/app/krono/media
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@magus.local}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - magus_network
    restart: always

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magus_celery_beat_prod
    command: celery -A krono beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - magus_network
    restart: always

  # Frontend Builder (one-time build)
  frontend-builder:
    image: node:20-alpine
    container_name: magus_frontend_builder
    working_dir: /app
    command: sh -c "npm ci --include=dev && npm run build"
    volumes:
      - ./frontend:/app
      - frontend_dist:/app/dist
    environment:
      - VITE_API_URL=/api
    networks:
      - magus_network

  # Frontend Server (nginx serving static files)
  frontend:
    image: nginx:alpine
    container_name: magus_frontend_prod
    volumes:
      - frontend_dist:/usr/share/nginx/html:ro
    ports:
      - "5173:80"
    depends_on:
      frontend-builder:
        condition: service_completed_successfully
    networks:
      - magus_network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: magus_nginx_prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_files:/app/staticfiles:ro
      - media_files:/app/media:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    networks:
      - magus_network
    restart: always

  # Certbot for SSL certificates (optional)
  certbot:
    image: certbot/certbot
    container_name: magus_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - magus_network

  # Database backup service (runs daily)
  backup:
    image: postgres:16-alpine
    container_name: magus_backup
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: >
      sh -c "
        while true; do
          BACKUP_FILE=/backups/magus_$$(date +%Y%m%d_%H%M%S).sql.gz
          PGPASSWORD=${POSTGRES_PASSWORD} pg_dump -h db -U ${POSTGRES_USER} ${POSTGRES_DB} | gzip > $$BACKUP_FILE
          find /backups -name 'magus_*.sql.gz' -mtime +30 -delete
          echo 'Backup completed: '$$BACKUP_FILE
          sleep 86400
        done
      "
    depends_on:
      - db
    networks:
      - magus_network
    restart: always

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local
  frontend_dist:
    driver: local

networks:
  magus_network:
    driver: bridge

