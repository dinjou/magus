name: CI - Test & Lint

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests (Python)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: magus_test
          POSTGRES_USER: magus_test
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov ruff black
      
      - name: Run Ruff (Linter)
        run: |
          ruff check krono/
      
      - name: Run Black (Formatter Check)
        continue-on-error: true
        run: |
          black --check krono/
      
      - name: Run migrations
        env:
          DATABASE_URL: postgresql://magus_test:test_password@localhost:5432/magus_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
        run: |
          cd krono
          python manage.py migrate
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://magus_test:test_password@localhost:5432/magus_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
        run: |
          cd krono
          pytest --cov=magus --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./krono/coverage.xml
          flags: backend
          name: backend-coverage
  
  frontend-tests:
    name: Frontend Tests (React/TypeScript)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run ESLint
        continue-on-error: true
        run: |
          cd frontend
          npm run lint
      
      - name: Run Prettier check
        continue-on-error: true
        run: |
          cd frontend
          npm run format:check
      
      - name: Run TypeScript check
        run: |
          cd frontend
          npm run type-check
      
      - name: Run unit tests
        run: |
          cd frontend
          npm run test -- --coverage
      
      - name: Build
        run: |
          cd frontend
          npm run build
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: magus:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create test .env file
        run: |
          cat > .env << EOF
          DEBUG=False
          SECRET_KEY=$(python3 -c "from secrets import token_urlsafe; print(token_urlsafe(50))")
          ALLOWED_HOSTS=localhost,127.0.0.1
          POSTGRES_DB=magus_test
          POSTGRES_USER=magus_test
          POSTGRES_PASSWORD=$(python3 -c "from secrets import token_urlsafe; print(token_urlsafe(32))")
          REDIS_PASSWORD=$(python3 -c "from secrets import token_urlsafe; print(token_urlsafe(32))")
          EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
          EMAIL_HOST=
          EMAIL_PORT=587
          EMAIL_USE_TLS=True
          EMAIL_HOST_USER=
          EMAIL_HOST_PASSWORD=
          DEFAULT_FROM_EMAIL=noreply@localhost
          EOF
      
      - name: Test Docker Compose
        run: |
          docker compose config

